syntax = "proto3";
package eth_parser.v1;

option go_package = "github.com/nakiner/eth-parser/pkg/pb/eth_parser/v1";
import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "ETH Parser";
    description: "Eth Parser service";
    version: "1.0";
  };
  host: "eth-parser.hoolie.io";
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "400";
    value: {
      description: "Bad Request";
      schema: {
        json_schema: {
          ref: ".eth_parser.v1.ErrorResponse";
        }
      }
    }
  }
  responses: {
    key: "401";
    value: {
      description: "Unauthorized";
      schema: {
        json_schema: {
          ref: ".eth_parser.v1.ErrorResponse";
        }
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Forbidden";
      schema: {
        json_schema: {
          ref: ".eth_parser.v1.ErrorResponse";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Not Found";
      schema: {
        json_schema: {
          ref: ".eth_parser.v1.ErrorResponse";
        }
      }
    }
  }
  responses: {
    key: "500";
    value: {
      description: "Internal Server Error";
      schema: {
        json_schema: {
          ref: ".eth_parser.v1.ErrorResponse";
        }
      }
    }
  }
  responses: {
    key: "default";
    value: {
      description: "Unexpected Error";
      schema: {
        json_schema: {
          ref: ".eth_parser.v1.ErrorResponse";
        }
      }
    }
  }
};

message ErrorResponse {
  google.protobuf.Empty data = 1;
  Error error = 2;
}

message Error {
  int64 code = 1;
  string message = 2;
  google.protobuf.Struct details = 3;
}

service ETHParserServiceV1 {
  rpc GetCurrentBlock(GetCurrentBlockRequest) returns (GetCurrentBlockResponse) {
    option (google.api.http) = {
      get: "/api/v1/parser/get-current-block",
    };
  }

  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {
    option (google.api.http) = {
      post: "/api/v1/parser/subscribe",
      body: "*"
    };
  }

  rpc GetTransactions(GetTransactionsRequest) returns (GetTransactionsResponse) {
    option (google.api.http) = {
      post: "/api/v1/parser/get-transactions",
      body: "*"
    };
  }
}

message GetCurrentBlockRequest {}

message GetCurrentBlockResponse {
  int32 block = 1;
}

message SubscribeRequest {
  string address = 1;
}

message SubscribeResponse {
  bool status = 1;
}

message GetTransactionsRequest {
  string address = 1;
}

message GetTransactionsResponse {
  repeated Transaction transactions = 1;
}

message Transaction {
  int32 id = 1;
}