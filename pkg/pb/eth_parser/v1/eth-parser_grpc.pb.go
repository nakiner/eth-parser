// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: eth_parser/v1/eth-parser.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ETHParserServiceV1_GetCurrentBlock_FullMethodName = "/eth_parser.v1.ETHParserServiceV1/GetCurrentBlock"
	ETHParserServiceV1_Subscribe_FullMethodName       = "/eth_parser.v1.ETHParserServiceV1/Subscribe"
	ETHParserServiceV1_GetTransactions_FullMethodName = "/eth_parser.v1.ETHParserServiceV1/GetTransactions"
)

// ETHParserServiceV1Client is the client API for ETHParserServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ETHParserServiceV1Client interface {
	GetCurrentBlock(ctx context.Context, in *GetCurrentBlockRequest, opts ...grpc.CallOption) (*GetCurrentBlockResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
}

type eTHParserServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewETHParserServiceV1Client(cc grpc.ClientConnInterface) ETHParserServiceV1Client {
	return &eTHParserServiceV1Client{cc}
}

func (c *eTHParserServiceV1Client) GetCurrentBlock(ctx context.Context, in *GetCurrentBlockRequest, opts ...grpc.CallOption) (*GetCurrentBlockResponse, error) {
	out := new(GetCurrentBlockResponse)
	err := c.cc.Invoke(ctx, ETHParserServiceV1_GetCurrentBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTHParserServiceV1Client) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, ETHParserServiceV1_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTHParserServiceV1Client) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, ETHParserServiceV1_GetTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ETHParserServiceV1Server is the server API for ETHParserServiceV1 service.
// All implementations should embed UnimplementedETHParserServiceV1Server
// for forward compatibility
type ETHParserServiceV1Server interface {
	GetCurrentBlock(context.Context, *GetCurrentBlockRequest) (*GetCurrentBlockResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
}

// UnimplementedETHParserServiceV1Server should be embedded to have forward compatible implementations.
type UnimplementedETHParserServiceV1Server struct {
}

func (UnimplementedETHParserServiceV1Server) GetCurrentBlock(context.Context, *GetCurrentBlockRequest) (*GetCurrentBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBlock not implemented")
}
func (UnimplementedETHParserServiceV1Server) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedETHParserServiceV1Server) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}

// UnsafeETHParserServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ETHParserServiceV1Server will
// result in compilation errors.
type UnsafeETHParserServiceV1Server interface {
	mustEmbedUnimplementedETHParserServiceV1Server()
}

func RegisterETHParserServiceV1Server(s grpc.ServiceRegistrar, srv ETHParserServiceV1Server) {
	s.RegisterService(&ETHParserServiceV1_ServiceDesc, srv)
}

func _ETHParserServiceV1_GetCurrentBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETHParserServiceV1Server).GetCurrentBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETHParserServiceV1_GetCurrentBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETHParserServiceV1Server).GetCurrentBlock(ctx, req.(*GetCurrentBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETHParserServiceV1_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETHParserServiceV1Server).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETHParserServiceV1_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETHParserServiceV1Server).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETHParserServiceV1_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETHParserServiceV1Server).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETHParserServiceV1_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETHParserServiceV1Server).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ETHParserServiceV1_ServiceDesc is the grpc.ServiceDesc for ETHParserServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ETHParserServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eth_parser.v1.ETHParserServiceV1",
	HandlerType: (*ETHParserServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentBlock",
			Handler:    _ETHParserServiceV1_GetCurrentBlock_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _ETHParserServiceV1_Subscribe_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _ETHParserServiceV1_GetTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eth_parser/v1/eth-parser.proto",
}
